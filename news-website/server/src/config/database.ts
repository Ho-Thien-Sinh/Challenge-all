import { Sequelize, DataTypes } from 'sequelize';
import dotenv from 'dotenv';
import path from 'path';

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

// Kh·ªüi t·∫°o k·∫øt n·ªëi Sequelize
const sequelize = new Sequelize(
  process.env.DB_NAME || 'news_website_dev',
  process.env.DB_USER || 'postgres',
  process.env.DB_PASSWORD || 'postgres',
  {
    host: process.env.DB_HOST || '127.0.0.1',
    port: parseInt(process.env.DB_PORT || '5432', 10),
    dialect: 'postgres',
    logging: process.env.NODE_ENV === 'development' ? console.log : false,
    pool: {
      max: 10,
      min: 0,
      acquire: 30000,
      idle: 10000
    },
    define: {
      underscored: true,
      timestamps: true,
      freezeTableName: true,
      paranoid: true,
      createdAt: 'created_at',
      updatedAt: 'updated_at',
      deletedAt: 'deleted_at',
    },
    dialectOptions: process.env.NODE_ENV === 'production' ? {
      ssl: {
        require: true,
        rejectUnauthorized: false
      }
    } : {}
  }
);

// H√†m k·∫øt n·ªëi v√† x√°c th·ª±c database
const connectDB = async () => {
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu...');
    await sequelize.authenticate();
    console.log('‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng');
    return sequelize;
  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu:', error);
    throw error;
  }
};

// L·∫•y instance c·ªßa sequelize
const getSequelizeInstance = () => {
  return sequelize;
};

// Export c√°c h√†m v√† bi·∫øn c·∫ßn thi·∫øt
export {
  connectDB,
  getSequelizeInstance,
  sequelize,
  Sequelize,
  DataTypes
};
