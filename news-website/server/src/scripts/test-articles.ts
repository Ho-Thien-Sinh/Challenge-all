import dotenv from 'dotenv';
dotenv.config();
import axios from 'axios';
import chalk from 'chalk';
import { sequelize } from '../config/database';

// C·∫•u h√¨nh axios
const API_BASE_URL = process.env['API_BASE_URL'] || 'http://localhost:3001/api/v1';
const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
});

// H√†m hi·ªÉn th·ªã k·∫øt qu·∫£
const logSuccess = (message: string) => console.log(chalk.green(`‚úÖ ${message}`));
const logInfo = (message: string) => console.log(chalk.blue(`‚ÑπÔ∏è ${message}`));
const logError = (message: string) => console.error(chalk.red(`‚ùå ${message}`));
// const logWarning = (message: string) => console.log(chalk.yellow(`‚ö†Ô∏è ${message}`));

// Test case 1: K·∫øt n·ªëi database
async function testDatabaseConnection() {
  try {
    logInfo('ƒêang k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu...');
    await sequelize.authenticate();
    logSuccess('K·∫øt n·ªëi database th√†nh c√¥ng!');
    return true;
  } catch (error: any) {
    logError(`L·ªói k·∫øt n·ªëi database: ${error?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    return false;
  }
}

// Test case 2: L·∫•y danh s√°ch b√†i vi·∫øt
async function testGetArticles() {
  try {
    logInfo('ƒêang l·∫•y danh s√°ch b√†i vi·∫øt...');
    const response = await api.get('/articles', {
      params: {
        page: 1,
        limit: 5,
        sortBy: 'createdAt',
        sortOrder: 'desc'
      }
    });

    const { data } = response;
    logSuccess(`L·∫•y th√†nh c√¥ng ${data.data.length} b√†i vi·∫øt`);
    
    // Hi·ªÉn th·ªã th√¥ng tin c√°c b√†i vi·∫øt
    data.data.forEach((article: any, index: number) => {
      console.log(chalk.cyan(`\n${index + 1}. ${article.title}`));
      console.log(`   üìÖ ${new Date(article.createdAt).toLocaleString()}`);
      console.log(`   üîó /article/${article.slug}`);
      console.log(`   üëÅÔ∏è  ${article.viewCount} l∆∞·ª£t xem`);
      if (article.categories?.length) {
        console.log(`   üè∑Ô∏è  ${article.categories.map((c: any) => c.name).join(', ')}`);
      }
    });

    return data.data;
  } catch (error) {
    handleApiError(error, 'L·ªói khi l·∫•y danh s√°ch b√†i vi·∫øt');
    return [];
  }
}

// Test case 3: T·∫°o b√†i vi·∫øt m·ªõi
async function testCreateArticle() {
  try {
    logInfo('ƒêang t·∫°o b√†i vi·∫øt m·ªõi...');
    
    const newArticle = {
      title: 'B√†i vi·∫øt ki·ªÉm th·ª≠ ' + Date.now(),
      content: 'ƒê√¢y l√† n·ªôi dung b√†i vi·∫øt ki·ªÉm th·ª≠',
      summary: 'T√≥m t·∫Øt b√†i vi·∫øt ki·ªÉm th·ª≠',
      imageUrl: 'https://via.placeholder.com/800x400',
      category: 'test',
      status: 'draft',
      tags: ['test', 'demo']
    };

    const response = await api.post('/articles', newArticle);
    logSuccess(`T·∫°o b√†i vi·∫øt th√†nh c√¥ng: ${response.data.data.title}`);
    console.log(`   ID: ${response.data.data.id}`);
    console.log(`   Slug: ${response.data.data.slug}`);
    
    return response.data.data;
  } catch (error) {
    handleApiError(error, 'L·ªói khi t·∫°o b√†i vi·∫øt');
    return null;
  }
}

// Test case 4: C·∫≠p nh·∫≠t b√†i vi·∫øt
async function testUpdateArticle(articleId: string) {
  try {
    logInfo(`ƒêang c·∫≠p nh·∫≠t b√†i vi·∫øt ${articleId}...`);
    
    const updates = {
      title: `[ƒê√É C·∫¨P NH·∫¨T] B√†i vi·∫øt ki·ªÉm th·ª≠ ${Date.now()}`,
      status: 'published',
      content: 'N·ªôi dung ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o ' + new Date().toLocaleString()
    };

    const response = await api.put(`/articles/${articleId}`, updates);
    logSuccess(`C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng`);
    console.log(`   Ti√™u ƒë·ªÅ m·ªõi: ${response.data.data.title}`);
    console.log(`   Tr·∫°ng th√°i: ${response.data.data.status}`);
    
    return response.data.data;
  } catch (error) {
    handleApiError(error, 'L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt');
    return null;
  }
}

// Test case 5: X√≥a b√†i vi·∫øt
async function testDeleteArticle(articleId: string) {
  try {
    logInfo(`ƒêang x√≥a b√†i vi·∫øt ${articleId}...`);
    await api.delete(`/articles/${articleId}`);
    logSuccess(`ƒê√£ x√≥a b√†i vi·∫øt ${articleId}`);
    return true;
  } catch (error) {
    handleApiError(error, 'L·ªói khi x√≥a b√†i vi·∫øt');
    return false;
  }
}

// H√†m x·ª≠ l√Ω l·ªói API
function handleApiError(error: any, context: string) {
  if (error.response) {
    // L·ªói t·ª´ ph·∫£n h·ªìi c·ªßa server
    const { status, data } = error.response;
    logError(`${context}: ${status} - ${data.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
    console.error('Chi ti·∫øt l·ªói:', data);
  } else if (error.request) {
    // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server
    logError(`${context}: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß`);
    console.error('L·ªói:', error.message);
  } else {
    // L·ªói khi thi·∫øt l·∫≠p request
    logError(`${context}: ${error.message}`);
  }
}

// H√†m ch·∫°y t·∫•t c·∫£ c√°c test case
async function runAllTests() {
  console.log(chalk.bold('\n=== B·∫ÆT ƒê·∫¶U KI·ªÇM TH·ª¨ API ARTICLES ===\n'));
  
  // Test k·∫øt n·ªëi database
  const dbConnected = await testDatabaseConnection();
  if (!dbConnected) {
    logError('Kh√¥ng th·ªÉ ti·∫øp t·ª•c ki·ªÉm th·ª≠ do l·ªói k·∫øt n·ªëi database');
    process.exit(1);
  }

  try {
    // Test 1: L·∫•y danh s√°ch b√†i vi·∫øt
    const articles = await testGetArticles();
    
    if (articles.length > 0) {
      // Test 2: C·∫≠p nh·∫≠t b√†i vi·∫øt ƒë·∫ßu ti√™n
      const updatedArticle = await testUpdateArticle(articles[0].id);
      
      if (updatedArticle) {
        // ƒê·ª£i 1 gi√¢y ƒë·ªÉ xem k·∫øt qu·∫£
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    // Test 3: T·∫°o b√†i vi·∫øt m·ªõi
    const newArticle = await testCreateArticle();
    
    if (newArticle) {
      // Test 4: X√≥a b√†i vi·∫øt v·ª´a t·∫°o
      await new Promise(resolve => setTimeout(resolve, 1000));
      await testDeleteArticle(newArticle.id);
    }
    
    logSuccess('\n‚úÖ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c b√†i ki·ªÉm th·ª≠!');
  } catch (error) {
    logError(`L·ªói kh√¥ng mong mu·ªën: ${(error as Error)?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi database
    await sequelize.close();
    process.exit(0);
  }
}

// Ch·∫°y t·∫•t c·∫£ c√°c test case
runAllTests();
