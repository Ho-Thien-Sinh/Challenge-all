import { Sequelize } from 'sequelize';
import dotenv from 'dotenv';
import path from 'path';

// Load environment variables
dotenv.config({ path: path.join(__dirname, '.env') });

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT || '5432', 10),
  username: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres',
  database: process.env.DB_NAME || 'newsapp',
};

async function initializeDatabase() {
  console.log('üîÑ ƒêang ki·ªÉm tra k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu...');

  // K·∫øt n·ªëi t·ªõi PostgreSQL server (kh√¥ng ch·ªâ ƒë·ªãnh database c·ª• th·ªÉ)
  const sequelize = new Sequelize({
    dialect: 'postgres',
    host: dbConfig.host,
    port: dbConfig.port,
    username: dbConfig.username,
    password: dbConfig.password,
    logging: false,
  });

  try {
    // Ki·ªÉm tra k·∫øt n·ªëi
    await sequelize.authenticate();
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn PostgreSQL server');

    // Ki·ªÉm tra xem database ƒë√£ t·ªìn t·∫°i ch∆∞a
    const [results] = await sequelize.query(
      `SELECT 1 FROM pg_database WHERE datname = '${dbConfig.database}'`
    );

    if ((results as any[]).length === 0) {
      console.log(`üîÑ ƒêang t·∫°o c∆° s·ªü d·ªØ li·ªáu '${dbConfig.database}'...`);
      await sequelize.query(`CREATE DATABASE "${dbConfig.database}"`);
      console.log(`‚úÖ ƒê√£ t·∫°o c∆° s·ªü d·ªØ li·ªáu '${dbConfig.database}'`);
    } else {
      console.log(`‚ÑπÔ∏è  C∆° s·ªü d·ªØ li·ªáu '${dbConfig.database}' ƒë√£ t·ªìn t·∫°i`);
    }

    // ƒê√≥ng k·∫øt n·ªëi
    await sequelize.close();

    // K·∫øt n·ªëi t·ªõi database v·ª´a t·∫°o
    const db = new Sequelize({
      database: dbConfig.database,
      username: dbConfig.username,
      password: dbConfig.password,
      host: dbConfig.host,
      port: dbConfig.port,
      dialect: 'postgres',
      logging: false,
    });

    // Ki·ªÉm tra k·∫øt n·ªëi t·ªõi database
    await db.authenticate();
    console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn database '${dbConfig.database}'`);
    
    // ƒê√≥ng k·∫øt n·ªëi
    await db.close();
    
    console.log('‚úÖ Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu ho√†n t·∫•t');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói khi kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu:', error);
    process.exit(1);
  }
}

initializeDatabase();
